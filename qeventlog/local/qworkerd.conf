DATABASES = {
  "default": {
    "ENGINE": "django.db.backends.mysql",
    "HOST": "localhost",
    "NAME": "qeventlog",
    "USER": "root",
    "PASSWORD": "root"
  },
}
CELERY_RESULT_BACKEND = "db+mysql://root:root@localhost/qeventlog"

token = "dde6774d00ffd29f103f098003c0de9e6fc5a699"
workingdir = "/var/spool/matterport/workerd/%(operation)s"

# Entry for logging exceptions to Sentry
RAVEN_CONFIG = {
  "dsn": "sync+https://60f12ed304d648a0b423266c6c12d49d:fd8a3cd22fb24da08f4ae7d4a4c970a8@app.getsentry.com/34367",
}

# Number of free disk blocks required before a job will be allowed to
# be run.
MIN_FREE_DISK_BLOCKS = 2000000

#
JOB_HANDLERS = {
  "generate_mesh_bigmesh": "meshtool",
  "reprocess_mesh_bigmesh": "meshtool",
  "generate_mesh": "meshtool",
  "reprocess_mesh": "meshtool",
  "rewrite_obj": "rewritetool",
}

# BROKER_URL = "redis://localhost:6379/1"
BROKER_URL = "amqp://localhost:5672//"

# Task hard time limit in seconds. The worker processing the task will
# be killed and replaced with a new one when this is exceeded.
CELERYD_TASK_TIME_LIMIT = 60 * 60 * 11 # 11 hours

# Task soft time limit in seconds.
# The SoftTimeLimitExceeded exception will be raised when this is
# exceeded. The task can catch this to e.g. clean up before the hard
# time limit comes.
# http://celery.readthedocs.org/en/latest/configuration.html#celeryd-task-soft-time-limit
CELERYD_TASK_SOFT_TIME_LIMIT = 60 * 60 * 10 # 10 hours

# Let"s use SQL for the results?  We need SQL that isn't Django specific.
#CELERY_RESULT_BACKEND = "db+mysql://celery:celery@localhost/celery"
#CELERY_RESULT_BACKEND = "djcelery.backends.database:DatabaseBackend"
